import React, { FC, Suspense } from 'react';

import Sort from '../components/Sort';
import Pagination from '../components/Pagination';

import Categories from '../components/Categories';
import PizzaBlock from '../components/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';

import qs from 'qs';

import { list } from '../components/Sort';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { useAppDispatch } from '../redux/store';
import {
    selectFilter,
    setCategoryId,
    setCurrentPage,
    setFilters,
} from '../redux/slices/filterSlice';
import { SearchPizzaParams, fetchPizzas, selectPizzaData } from '../redux/slices/pizzasSlice';

const MyComp = React.lazy(() => import('../utils/math'));

const Home: React.FC = () => {
    //? useCallback –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏ –≥–æ–≤–æ—Ä–∏–º –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å –µ–µ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é).
    const onChangeCategory = React.useCallback((id: number) => {
        dispatch(setCategoryId(id));
        console.log(id);
    }, []);

    const navigate = useNavigate();
    const dispatch = useAppDispatch();

    //–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ query —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è
    const isSearch = React.useRef(false);

    //–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª–æ—Å—å –∏–ª–∏ –Ω–µ—Ç (–±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∏–ª–∏ –Ω–µ—Ç)
    const isMounted = React.useRef(false);

    const { categoryId, sortType, currentPage, searchValue } = useSelector(selectFilter);
    const { items, status } = useSelector(selectPizzaData);

    //* –ø–æ–ª—É—á–µ–Ω–∏–µ page –∏–∑ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    function onChangePage(page: number) {
        dispatch(setCurrentPage(page));
    }
    const getPizzas = async () => {
        const search = searchValue ? `&search=${searchValue}` : '';
        const category = categoryId > 0 ? `category=${categoryId}` : '';
        const sortBy = sortType.sortProperty.replace('-', ''); //—É–¥–∞–ª—è–µ–º –º–∏–Ω—É—Å –∏–∑ sort
        const order = sortType.sortProperty.includes('-') ? 'asc' : 'desc'; // –µ—Å—Ç—å –ª–∏ –º–∏–Ω—É—Å

        dispatch(
            fetchPizzas({
                currentPage: String(currentPage),
                category,
                sortBy,
                order,
                search,
            }),
        );
    };

    //! –ü–û–õ–£–ß–ê–ù–ò–ï –ò–ó URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - —ç—Ç–∏ 3 useEffect
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±—ã–ª 1 —Ä–µ–Ω–¥–µ—Ä
    React.useEffect(() => {
        // –Ω–∞ 2 –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –æ–¥–Ω—É —Ü–µ–ª—É—é —Å—Ç—Ä–æ–∫—É
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: sortType.sortProperty,
                category: categoryId,
                currentPage: currentPage,
            }); //'queryString: ' sortProperty=rating&category=0&currentPage=1
            navigate(`?${queryString}`);
        }
        //—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º —á—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
        isMounted.current = true;
    }, [categoryId, sortType, searchValue, currentPage]);

    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ search –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥—Ä–µ => –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç, –±–µ—Ä–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π sortType, –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ Redux.
    React.useEffect(() => {
        //–µ—Å–ª–∏ –≤ URL –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ –º—ã –ø–∞—Ä—Å–∏–º –≤ –æ–±—ä–µ–∫—Ç
        if (window.location.search) {
            //—É–±–µ—Ä–∞–µ–º –∑–Ω–∞–∫ ? –∏–∑ URL, SearchPizzaParams - —Ç–∏–ø –¥–ª—è BackEnd, —á—Ç–æ–±—ã –º—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–∫–∏.
            const params = qs.parse(window.location.search.substring(1)) as SearchPizzaParams; // { sortProperty: 'rating', category: '1', currentPage: '1' }
            const sort = list.find((obj) => obj.sortProperty === params.sortBy);

            //—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è setFilters –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–ø FilterSliceState
            dispatch(
                setFilters({
                    searchValue: params.search,
                    categoryId: Number(params.category),
                    currentPage: Number(params.currentPage),
                    //–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∏ÃÜ—Ç–∏ —Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ list
                    sortType: sort || list[0],
                }),
            );

            console.log('useEffect1', isSearch.current);
            // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏—à–ª–∏ –∏–∑ URL - –î–∞, => —Ç–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç—É—Ç #2.
            // –∏ –∫–æ–≥–¥–∞ Redux –æ–±–Ω–æ–≤–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è #2 —Ç–∫ –æ–Ω —Å–ª–µ–¥–∏—Ç –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ Redux
            isSearch.current = true;
        }
    }, []);

    //#2 –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –∑–∞–ø—Ä–∞—â–∏–≤–∞–µ–º –ø–∏—Ü—Ü—ã
    React.useEffect(() => {
        console.log('useEffect2', isSearch.current);

        window.scrollTo(0, 0);
        if (!isSearch.current) {
            getPizzas();
        }

        isSearch.current = false;
        console.log('useEffect2_isSearch', isSearch.current);
    }, [categoryId, sortType, searchValue, currentPage]);

    const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />);
    const pizzas = items.map((obj) => <PizzaBlock key={obj.id} {...obj} />);

    return (
        <div className="container">
            <div className="content__top">
                <Categories value={categoryId} onChangeCategory={onChangeCategory} />
                <Sort sortType={sortType} />
            </div>

            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            {status === 'error' ? (
                <div className="content__error-info">
                    <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
                    <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ç—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.</p>
                </div>
            ) : (
                <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
            )}

            <Pagination currentPage={currentPage} onChangePage={onChangePage} />
        </div>
    );
};

export default Home;
